---

# This file contains all the Ansible magic needed
# to turn a vanilla Ubuntu Precise VM to a Minion
# development instance.

# All constant variables are defined under group_vars/all.
# You will recongize such vars by seeing CAPTIALIZATION.

# STEP 1: Update and install libraries and packages
# Users may install more up-to-date version of Mongodb
# for example, if they find the apt-get version slow
# or behind features.
- hosts: vm
  sudo: True
  gather_facts: no
  tags:
    - required
    - system

  tasks:
    - name: Update apt-get
      apt: update_cache=yes

    - name: Install essentials (see Minion README)
      apt: pkg={{ item }} force=yes
      with_items:
        - git
        - build-essential
        - python-virtualenv
        - python-dev
        - mongodb-server
        - rabbitmq-server
        - curl
        - libcurl4-openssl-dev
        - stunnel4
        - debconf-utils

    - name: Pre-selectpostfix installation options
      command: 'echo "postfix postfix/main_mailer_type select Internet Site" | sudo debconf-set-selections
echo "postfix postfix/mailname string 127.0.0.1" | sudo debconf-set-selections'
    
    - name: Install postfix
      apt: pkg=postfix
                
    - name: Install basic development tools
      apt: pkg={{ item }} force=yes
      with_items:
        - vim
        - tree
        - unzip

    - name: Install supervisor
      pip: name=supervisor state=present

# STEP 2: Create service directories
# We place Minion under /opt but users may
# place Minion under any directory they want
# to. 
- hosts: vm
  sudo: True
  gather_facts: no
  tags:
     - required
     - minion

  tasks:
     - name: Ensure {{ MINION_DIR }} exists
       file: path={{ MINION_DIR }} state=directory owner={{ USER }} group={{ USER }}

     - name: Ensure {{ MINION_LOG_DIR }} exists
       file: path={{ MINION_LOG_DIR }} state=directory owner={{ USER }} group={{ USER }}

# STEP 3: Clone Minion umbrella repository
- hosts: vm
  gather_facts: no
  tags:
    - required
    - minion
    - minion-repo
    
  tasks:
    - name: git clone /mozilla/minion
      git: repo={{ MINION_REPO }} dest={{ MINION_DIR }} update=yes force=yes
      
# STEP 4: Install / develop minion
# If 'develop' is passed as extra-args:
#   create b and f virtualenv
#   install backend and frontend using respective
#   virtualenv.
# If 'install' is passed as extra-args:
#   execute minion/setup.sh which will install
#   minion-backend and frontend using minion/env/
#   virtualenv.

- hosts: vm
  gather_facts: no
  tags:
    - required
    - minion
    - minion-repo
    - minion-setup

  tasks:
    - name: Clone minion-backend and minion-frontend using setup.sh
      command: "{{ MINION_DIR }}/./setup.sh clone {{ MINION_DIR }}"
      when: install is defined

    - name: Install minion using setup.sh
      command: "{{ MINION_DIR }}/./setup.sh install {{ MINION_DIR }}"
      when: install is defined

    - name: Clone minion-backend and minion-frontend (develop)
      git: repo={{ item.src }} dest={{ item.dest }} update=yes
      with_items:
        - {'src': "{{ MINION_BACKEND_REPO_URL }}", 
            'dest': "{{ MINION_BACKEND_DIR }}" }
        - {'src': "{{ MINION_FRONTEND_REPO_URL }}",
           'dest': "{{ MINION_FRONTEND_DIR }}"}
      when: develop is defined

    - name: Configure setup.sh
      template: src=templates/setup.sh.j2 dest={{ MINION_DIR }}/setup.sh
      when: develop is defined

    - name: chmod setup.sh
      file: path={{ MINION_DIR }}/setup.sh mode=0777
      when: develop is defined     

    - name: Create backend, frontend  env
      command: virtualenv {{ item }}
      with_items:
        - "{{ MINION_BACKEND_ENV }}"
        - "{{ MINION_FRONTEND_ENV }}"
      when: develop is defined
      ignore_errors: yes

    - name: Develop minion-backend and frontend (develop)
      command: "{{ MINION_DIR }}/./setup.sh"
      when: develop is defined
      
    - name: Ensure {{ MINION_DIR }}/minion-backed exists
      file: path={{ MINION_BACKEND_DIR }} state=directory

    - name: Ensure {{ MINION_DIR }}/minion-frontend exists
      file: path={{ MINION_FRONTEND_DIR }} state=directory

    - name: Ensure {{ MINION_SCRIPT_DIR }} exists
      file: path={{ MINION_SCRIPT_DIR }} state=directory owner={{ USER }} group={{ USER }}

    - name: Configure startup scripts (develop)
      template: src=templates/{{ item.src }} dest={{ MINION_SCRIPT_DIR }}/{{ item.dest }}
      with_items:
        - {'src': 'start-backend.sh.j2', 
           'dest': 'start-backend.sh'}
        - {'src': 'start-plugin.sh.j2', 
           'dest': 'start-plugin.sh'}
        - {'src': 'start-scan.sh.j2', 
           'dest': 'start-scan.sh'}
        - {'src': 'start-state.sh.j2', 
           'dest': 'start-state.sh'}
        - {'src': 'start-frontend.sh.j2', 
           'dest': 'start-frontend.sh'}

    - name: Make all files under {{ MINION_SCRIPT_DIR }} executable (develop)
      raw: 'cd {{ MINION_SCRIPT_DIR }} && chmod 777 *'
            
# STEP 5.1: Install ZAP (optional, default to yes)
# This is optional if one runs with --tags "!zap"
# Note you can run with multiple tags: --tags "tag1:tag2:!tag3:tag4..."
# Read Ansible: http://www.ansibleworks.com/docs/playbooks2.html/#tags

- hosts: vm
  gather_facts: no
  tags:
    - minion
    - minion-setup
    - plugins
    - zap

  tasks:
    - name: Ensure /opt/minion/plugins exists
      file: path={{ MINION_PLUGINS_DIR }} state=directory owner={{ USER }} group={{ USER }}

    - name: Install JAVA using openjdk
      apt: pkg=openjdk-7-jdk
      sudo: True

    - name: Download known stable ZAP release
      get_url: url={{ ZAP_URL }} dest={{ MINION_PLUGINS_DIR }}/zap.zip

    # We could handle the case when extract exists and skip
    # But if you bootstrap again and again, it's better to 
    # default to override existing content.
    - name: Extract zap.zip into zap 
      command: unzip {{ MINION_PLUGINS_DIR }}/zap.zip -d {{ MINION_PLUGINS_DIR }}

    - name: Rename folder to zap
      command: mv {{ MINION_PLUGINS_DIR }}/{{ ZAP_RELEASE_DIR }} {{ ZAP_DIR }}

    # This is difficult handle since user MIGHT have
    # their own stuff in /etc/environment. But such
    # file should always be centrally managed. In our
    # case, we simply replace the conf file with our own
    # by templating.
    - name: Configure /etc/environment to include zap
      template: src=templates/environment.j2 dest=/etc/environment
      sudo: True    # this require sudo privilege, ansible shortcut :)
   
    # Install minion-zap-plugin
    - name: Clone minion-zap-plugin
      git: repo={{ ZAP_REPO_URL }} dest={{ MINION_PLUGINS_DIR }}/minion-zap-plugin update=yes

    - name: Install minion-zap-plugin
      command: sudo python {{ MINION_PLUGINS_DIR }}/minion-zap-plugin/setup.sh install
      when: install is defined

    - name: Develop minion-zap-plugin
      raw: "cd {{ MINION_PLUGINS_DIR }}/minion-zap-plugin && {{ MINION_BACKEND_ENV }}/bin/python {{ MINION_PLUGINS_DIR }}/minion-zap-plugin/setup.py develop"
      when: develop is defined


# STEP 5.2: Install Skipfish (optional, default to yes)
# See above, for how to run it as optional

- hosts: vm
  gather_facts: yes # we need to detect 32bit/64bit
  tags:
    - minion
    - minion-setup
    - plugins
    - skipfish

  tasks:
    - name: Ensure {{ MINION_PLUGINS_DIR }} exits
      file: path={{ MINION_PLUGINS_DIR }} state=directory owner={{ USER }} group={{ USER }}

    - name: Download 32-bit
      get_url: url=http://launchpadlibrarian.net/126324292/skipfish_2.10b-1_i386.deb dest={{ MINION_PLUGINS_DIR }}/skipfish.deb force=no
      when: ansible_architecture == 'i386'

    - name: Download 64-bit
      get_url: url=http://launchpadlibrarian.net/126324272/skipfish_2.10b-1_amd64.deb dest={{ MINION_PLUGINS_DIR }}/skipfish.deb force=no
      when: ansible_architecture == 'x86_64'

    - name: Install skipfish via apt-get
      command: sudo dpkg -i {{ MINION_PLUGINS_DIR }}/skipfish.deb
      ignore_errors: yes
      
    - name: Clone minion-skipfish-plugin
      git: repo={{ SKIPFISH_REPO_URL }} dest={{ MINION_PLUGINS_DIR }}/minion-skipfish-plugin update=yes

    - name: Install minion-zap-plugin
      command: sudo python {{ MINION_PLUGINS_DIR }}/minion-skipfish-plugin/setup.sh install
      when: install is defined

    - name: Develop minion-skipfish-plugin
      raw: "cd {{ MINION_PLUGINS_DIR }}/minion-skipfish-plugin && {{ MINION_BACKEND_ENV }}/bin/python {{ MINION_PLUGINS_DIR }}/minion-skipfish-plugin/setup.py develop"
      when: develop is defined

# STEP 5.3: Install minion-breach-plugin (optional)

- hosts: vm
  gather_facts: no
  tags:
    - minion
    - minion-setup
    - plugins
    - breach

  tasks:
    - name: Ensure {{ MINION_PLUGINS_DIR }} exists
      file: path={{ MINION_PLUGINS_DIR }} state=directory owner={{ USER }} group={{ USER }}

    - name: Clone minion-breach-plugin
      git: repo={{ BREACH_REPO_URL }} dest={{ MINION_PLUGINS_DIR }}/minion-breach-plugin update=yes

    - name: Install minion-breach-plugin
      command: sudo python {{ MINION_PLUGINS_DIR }}/minion-breach-plugin/setup.py install
      when: install is defined

    - name: Develop minion-breach-plugin
      raw: "cd {{ MINION_PLUGINS_DIR }}/minion-breach-plugin && {{ MINION_BACKEND_ENV }}/bin/python {{ MINION_PLUGINS_DIR }}/minion-breach-plugin/setup.py develop"
      when: develop is defined

# STEP 6: Setup supervisor
- hosts: vm
  sudo: True
  gather_facts: no
  tags:
    - minion
    - minion-setup
    - supervisord

  tasks:
    - name: Install gunicorn
      pip: name=gunicorn state=present

    - name: Install supervisor
      pip: name=supervisor state=present
     
    - name: Create /etc/supervisor directory
      file: path=/etc/supervisor state=directory

    - name: Create /etc/supervisor/conf.d/ directory
      file: path=/etc/supervisor/conf.d state=directory

    - name: Configure /etc/supervisor/supervisord.conf
      template: src=templates/supervisord.conf.j2 dest=/etc/supervisor/supervisord.conf

    - name: Copy supervisord configuration files to /etc/supervisor/conf.d/
      template: src=templates/{{ item.src }} dest={{ item.dest }}
      with_items:
        - {'src': minion-backend.supervisor.conf,
           'dest': '/etc/supervisor/conf.d/minion-backend.supervisor.conf'}
        - {'src': minion-plugin-worker.supervisor.conf,
           'dest': '/etc/supervisor/conf.d/minion-plugin-worker.supervisor.conf'}
        - {'src': minion-scan-worker.supervisor.conf,
           'dest': '/etc/supervisor/conf.d/minion-scan-worker.supervisor.conf'}
        - {'src': minion-state-worker.supervisor.conf,
           'dest': '/etc/supervisor/conf.d/minion-state-worker.supervisor.conf'}
        - {'src': minion-frontend.supervisor.conf,
           'dest': '/etc/supervisor/conf.d/minion-frontend.supervisor.conf'}
      
    - name: Stop supervisor managed processes
      command: sudo supervisorctl -c /etc/supervisor/supervisord.conf stop all
      ignore_errors: yes

    - name: Shut down supervisord
      command: sudo supervisorctl -c /etc/supervisor/supervisord.conf shutdown
      ignore_errors: yes
        
    - name: Pause 10 seconds to let supervisor cool down.
      pause: seconds=10

    #- name: Start supervisord
    #  command: sudo supervisord -c /etc/supervisor/supervisord.conf

# STEP 7: Add .bash_aliases and vimrc
# These aliases are meant for quick access

- hosts: vm
  gather_facts: no
  tags:
    - required
    - minion-setup

  tasks:
    - name: Configure .bash_aliases
      template: src=templates/bash_aliases.j2 dest=/home/{{ USER }}/.bash_aliases

    - name: Configure vimrc
      template: src=templates/vimrc dest=/home/{{ USER }}/.vimrc
